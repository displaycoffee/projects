// PX to EM/REM conversion
// From https://css-tricks.com/snippets/sass/px-to-em-functions
@function em($pixels, $unit: em, $context: 16px) {
	@if (unitless($pixels)) {
		$pixels: $pixels * 1px;
	}
	@if (unitless($context)) {
		$context: $context * 1px;
	}
	$multiplier: 1em;
	@if ($unit == 'rem') {
		$multiplier: 1rem;
	}
	@return calc($pixels / $context) * $multiplier;
}

// Create an optimized svg url - version: 1.0.6
// From: https://codepen.io/jakob-e/full/doMoML
@function svg-encode($svg) {
	// Add missing namespace
	@if not str-index($svg,xmlns) {
		$svg: svg-str-replace($svg, '<svg','<svg xmlns="http://www.w3.org/2000/svg"');   
	}

	// Chunk up string in order to avoid "stack level too deep" error
	$encoded:'';
	$slice: 2000;
	$index: 0;
	$loops: ceil(calc(str-length($svg) / $slice));
	@for $i from 1 through $loops {
		$chunk: str-slice($svg, $index, $index + $slice - 1); 
		// Encode
		$chunk: svg-str-replace($chunk, '"', '\'');
		$chunk: svg-str-replace($chunk, '%', '%25');
		$chunk: svg-str-replace($chunk, '#', '%23');       
		$chunk: svg-str-replace($chunk, '{', '%7B');
		$chunk: svg-str-replace($chunk, '}', '%7D');         
		$chunk: svg-str-replace($chunk, '<', '%3C');
		$chunk: svg-str-replace($chunk, '>', '%3E');
		$encoded: #{$encoded}#{$chunk};
		$index: $index + $slice;
	}
	@return url("data:image/svg+xml,#{$encoded}");   
}

// Helper function to replace characters in a svg string
@function svg-str-replace($string, $search, $replace: '') {
	$index: str-index($string, $search);
	@return if($index, str-slice($string, 1, $index - 1) + $replace + svg-str-replace(str-slice($string, $index + str-length($search)), $search, $replace), $string);
}

// Source - [@Stephn-R] (https://github.com/sass/sass/issues/1395#issuecomment-57483844)
// Description converts 1 or more characters into a unicode
// Input: unicode("e655")
// Output: "\e655"
@function unicode($str) {
    @return unquote("\"") + unquote(str-insert($str, "\\", 1)) + unquote("\"");
}